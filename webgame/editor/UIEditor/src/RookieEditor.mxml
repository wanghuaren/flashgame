<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009"
					   xmlns:s="library://ns.adobe.com/flex/spark"
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   width="1200"
					   height="600"
					   backgroundAlpha="0"
					   addedToStage="Init()"
					   close="OnCloseWindow(event)"
					   frameRate="60">
	<fx:Style source="RookieEditor.css"/>

	<fx:Script>
		<![CDATA[
			import air.update.ApplicationUpdaterUI;
			import air.update.events.UpdateEvent;

			import com.gamerisker.core.Define;
			import com.gamerisker.manager.ControlManager;
			import com.gamerisker.manager.FileManager;
			import com.gamerisker.manager.MultipleManager;
			import com.gamerisker.manager.OperateManager;
			import com.gamerisker.manager.SharedManager;
			import com.gamerisker.view.AlignMentWindow;
			import com.gamerisker.view.ChangeLogWindow;
			import com.gamerisker.view.CodeWindow;
			import com.gamerisker.view.EditorScene;
			import com.gamerisker.view.HelpWindow;
			import com.gamerisker.view.HistroyWindow;
			import com.gamerisker.view.LoadBarWindow;
			import com.gamerisker.view.PropertyWindow;
			import com.gamerisker.view.SelectWindow;
			import com.gamerisker.view.SetSystemWindow;
			import com.gamerisker.view.SkinBrowse;
			import com.gamerisker.view.TreeWindow;

			import mx.collections.XMLListCollection;
			import mx.controls.Alert;
			import mx.events.ColorPickerEvent;
			import mx.events.MenuEvent;

			import spark.events.IndexChangeEvent;

			private var appUpdater:ApplicationUpdaterUI=new ApplicationUpdaterUI();

			private static var m_Operate:OperateManager=new OperateManager;

			private static var m_LoadBar:LoadBarWindow;
			private static var PropertyW:PropertyWindow;
			private static var SelectW:SelectWindow;
			private static var TreeW:TreeWindow;
			private static var EditorW:EditorScene;
			private static var m_AlignW:AlignMentWindow;
			private static var m_SkinW:SkinBrowse;
			private static var m_Rookie:RookieEditor;
			private static var m_System:SetSystemWindow;
			private static var m_CodeW:CodeWindow;
			private static var m_Help:HelpWindow;
			private static var m_ChangeLog:ChangeLogWindow;
			private static var m_histroy:HistroyWindow;
			private var menubarXML:XMLList=
				<>
					<menuitem label="打开" data="0"/>
					<menuitem label="保存" data="1"/>
					<menuitem label="清空编辑区" data="2"/>
					<menuitem label="对齐" data="3"/>
					<menuitem label="打包" data="4"/>
					<menuitem label="解包" data="5"/>
					<menuitem label="一键打包" data="6"/>
					<menuitem label="显示源码" data="7"/>
					<menuitem label="设置" data="8"/>
					<menuitem label="关于" data="9"/>
					<menuitem label="显示FPS" data="10"/>
				</>;
			[Bindable]
			private var menuList:XMLListCollection;

			private function Init():void
			{
				menuList=new XMLListCollection(menubarXML);
				stage.addEventListener(Event.RESIZE, OnResizeStage);
				m_Rookie=this;

				visible=false;

				Define.fullScreenWidth=stage.fullScreenWidth;
				Define.fullScreenHeight=stage.fullScreenHeight;

				var _x:int=Math.max(0, (stage.fullScreenWidth - LoadBar.width) >> 1);
				var _y:int=Math.max(0, (stage.fullScreenHeight - LoadBar.height) >> 1);
				LoadBar.open();
				LoadBar.move(_x, _y);

			}

			public function Start():void
			{
//				Editor.open();
				EditorScene.instance(menubar);

//				Tree.open();
				TreeWindow.instance(myTree);

//				Property.open();
				PropertyWindow.instance(dataGrid);

//				Select.open();
				Select.panel=SelectComponet;

//				Histroy.open();
				HistroyWindow.instance(list);

				statusBar.height=3;

				Hide();

				CheckVersion(); //检查版本更新
			}

			public function Hide():void
			{
//				Editor.visible = false;

//				Tree.visible = false;

//				Property.visible = false;

//				Select.visible = false;

//				Histroy.visible = false;

				this.visible=false;
			}


			public static function getInstante():RookieEditor
			{
				return m_Rookie;
			}

			/**操作管理*/
			public function get Operate():OperateManager
			{
				return m_Operate;
			}

			public function set Help(value:HelpWindow):void
			{
				m_Help=value;
			}

			public function get Help():HelpWindow
			{
				if (!m_Help)
				{
					m_Help=new HelpWindow;
					m_Help.type=NativeWindowType.UTILITY;
					m_Help.systemChrome=NativeWindowSystemChrome.NONE;
				}
				return m_Help;
			}

			public function set LoadBar(value:LoadBarWindow):void
			{
				m_LoadBar=value;
			}

			public function get LoadBar():LoadBarWindow
			{
				if (!m_LoadBar)
				{
					m_LoadBar=new LoadBarWindow;
					m_LoadBar.type=NativeWindowType.UTILITY;
					m_LoadBar.systemChrome=NativeWindowSystemChrome.NONE;
				}
				return m_LoadBar;
			}

			public function set Editor(value:EditorScene):void
			{
				EditorW=value;
			}

			public function get Editor():EditorScene
			{
				if (!EditorW)
				{
					EditorW=EditorScene.instance();
//					EditorW.type = NativeWindowType.UTILITY;
//					EditorW.systemChrome = NativeWindowSystemChrome.NONE;
				}

				return EditorW;
			}

			public function set Tree(value:TreeWindow):void
			{
				TreeW=value;
			}

			public function get Tree():TreeWindow
			{
				if (!TreeW)
				{
					TreeW=TreeWindow.instance(myTree);
//					TreeW.type = NativeWindowType.UTILITY;
//					TreeW.systemChrome = NativeWindowSystemChrome.NONE;
				}
				return TreeW;
			}

			public function set Property(value:PropertyWindow):void
			{
				PropertyW=value;
			}

			public function get Property():PropertyWindow
			{
				if (!PropertyW)
				{
					PropertyW=PropertyWindow.instance(dataGrid);
//					PropertyW.type = NativeWindowType.UTILITY;
//					PropertyW.systemChrome = NativeWindowSystemChrome.NONE;
				}
				return PropertyW;
			}

			public function set Select(value:SelectWindow):void
			{
				SelectW=value;
			}

			public function get Select():SelectWindow
			{
				if (!SelectW)
				{
					SelectW=SelectWindow.instance;
//					SelectW.type = NativeWindowType.UTILITY;
//					SelectW.systemChrome = NativeWindowSystemChrome.NONE;
				}
				return SelectW;
			}

			public function set Code(value:CodeWindow):void
			{
				m_CodeW=value;
			}

			public function get Code():CodeWindow
			{
				if (!m_CodeW)
				{
					m_CodeW=new CodeWindow;
					m_CodeW.type=NativeWindowType.UTILITY;
					m_CodeW.systemChrome=NativeWindowSystemChrome.NONE;
				}
				return m_CodeW;
			}

			public function set Align(value:AlignMentWindow):void
			{
				m_AlignW=value;
			}

			public function get Align():AlignMentWindow
			{
				if (!m_AlignW)
				{
					m_AlignW=new AlignMentWindow;
					m_AlignW.type=NativeWindowType.UTILITY;
					m_AlignW.systemChrome=NativeWindowSystemChrome.NONE;
				}
				return m_AlignW;
			}

			public function set Skin(value:SkinBrowse):void
			{
				m_SkinW=value;
			}

			public function get Skin():SkinBrowse
			{
				if (!m_SkinW)
				{
					m_SkinW=new SkinBrowse;
					m_SkinW.type=NativeWindowType.UTILITY;
					m_SkinW.systemChrome=NativeWindowSystemChrome.NONE;
				}
				return m_SkinW;
			}

			public function set System(value:SetSystemWindow):void
			{
				m_System=value;
			}

			public function get System():SetSystemWindow
			{
				if (!m_System)
				{
					m_System=new SetSystemWindow;
					m_System.type=NativeWindowType.UTILITY;
					m_System.systemChrome=NativeWindowSystemChrome.NONE;
				}
				return m_System;
			}

			public function set ChangeLog(value:ChangeLogWindow):void
			{
				m_ChangeLog=value;
			}

			public function get ChangeLog():ChangeLogWindow
			{
				if (!m_ChangeLog)
				{
					m_ChangeLog=new ChangeLogWindow;
					m_ChangeLog.type=NativeWindowType.UTILITY;
					m_ChangeLog.systemChrome=NativeWindowSystemChrome.NONE;
				}
				return m_ChangeLog;
			}

			public function set Histroy(value:HistroyWindow):void
			{
				m_histroy=value
			}

			public function get Histroy():HistroyWindow
			{
				if (!m_histroy)
				{
					m_histroy=HistroyWindow.instance(list);
//					m_histroy.type = NativeWindowType.UTILITY;
//					m_histroy.systemChrome = NativeWindowSystemChrome.NONE;
				}
				return m_histroy;
			}

			public function ResetPosition():void
			{
//				SelectW.visible = true;
//				PropertyW.visible = true;
//				TreeW.visible = true;
//				EditorW.visible = true;
//				m_histroy.visible = true;

//				this.width = stage.fullScreenWidth - SelectW.width - PropertyW.width;
//				EditorW.height = stage.fullScreenHeight - this.height - 100;
//				EditorW.width = this.width;

//				ChangeLog.move((stage.fullScreenWidth - ChangeLog.width) >> 1,(stage.fullScreenHeight - ChangeLog.height) >> 1);

//				SelectW.move(0,0);
//				TreeW.move(0,SelectW.height);

//				this.move(SelectW.width,0);
//				EditorW.move(SelectW.width,this.height);
//				PropertyW.move(SelectW.width + this.width,0);
//				m_histroy.move(SelectW.width + this.width,PropertyW.height);

				//所有窗口初始化完成后 显示
//				Editor.visible = true;
//				
//				Tree.visible = true;
//				
//				Property.visible = true;
//				
//				Select.visible = true;
//				
//				Histroy.visible = true;

				this.visible=true;

				LoadBar.close();
			}

			public function setResizeStage(w:int, h:int):void
			{
//				_width.text = String(w);
//				_height.text = String(h);
			}

			public function OnCloseWindow(event:Event):void
			{
//				if(PropertyW)PropertyW.close();
//				if(TreeW)TreeW.close();
//				if(SelectW)SelectW.close();
//				if(EditorW)EditorW.close();
				if (Code)
					Code.close();
				if (Help)
					Help.close();
				if (LoadBar)
					LoadBar.close();
				if (ChangeLog)
					ChangeLog.close();
//				if(Histroy)Histroy.close();

				getInstante().close();

				try
				{
					if (m_AlignW && !m_AlignW.closed)
						m_AlignW.close()
				}
				catch (e:Error)
				{
				}
				;

				try
				{
					if (m_SkinW && !m_SkinW.closed)
						m_SkinW.close()
				}
				catch (e:Error)
				{
				}
				;

				try
				{
					if (m_System && !m_System.closed)
						m_System.close()
				}
				catch (e:Error)
				{
				}

			}

			private function CheckVersion():void
			{
				appUpdater.updateURL=Define.UPDATE;
				appUpdater.isCheckForUpdateVisible=false;
				appUpdater.addEventListener(UpdateEvent.INITIALIZED, onUpdate);
				appUpdater.initialize();
			}

			private function onUpdate(event:UpdateEvent):void
			{
				appUpdater.localeChain=["zh_CN", "en_US"];
				appUpdater.checkNow();
			}

			private function OnSave():void
			{
				if (ControlManager.getCurrentComponent() != null)
				{
					FileManager.saveXMLFile();
				}
				else
				{
					Alert.show("没有控制组件", "错误", Alert.OK, menubar);
				}
			}

			private function OnOpen():void
			{
				FileManager.openViewFile();
			}

			private function OnPack():void
			{
				FileManager.packXMLFile();
			}

			private function OnPrasePacke():void
			{
				FileManager.onPrasePacke();
			}

			private function OnKeyPacker():void
			{
				FileManager.keyPackXMLFile();
			}

			private function OnOpenComponent():void
			{
//				Select.open();
			}

			private function OnOpenProperty():void
			{
//				Property.open();
			}

			private function OnOpenTree():void
			{
//				Tree.open();
			}

			private function OnOpenEditor():void
			{
//				Editor.open();
			}

			private function ShowHistory():void
			{
//				Histroy.open();
			}

			private function OnShowCode():void
			{
				var _x:int=Math.max(0, (stage.fullScreenWidth - Code.width) >> 1);
				var _y:int=Math.max(0, (stage.fullScreenHeight - Code.height) >> 1);
				Code.open();
				Code.move(_x, _y);
			}

			public function OnSetSystem():void
			{
				var _x:int=Math.max(0, (stage.fullScreenWidth - System.width) >> 1);
				var _y:int=Math.max(0, (stage.fullScreenHeight - System.height) >> 1);
				System.open();
				System.move(_x, _y);
			}

			private function OnClear():void
			{
				Define.Scene_Edit.Clear();
				MultipleManager.RemoveAll();
				ControlManager.target=null;
				Tree.update();
				Code.update();
			}

			private function OnChangeColor(event:ColorPickerEvent):void
			{
				Define.starlingStg.color=event.color;
			}

			private function OnShowAlign():void
			{
				var _x:int=Math.max(0, (stage.fullScreenWidth - Align.width) >> 1);
				var _y:int=Math.max(0, (stage.fullScreenHeight - Align.height) >> 1);

				Align.open();
				Align.move(_x, _y);
			}

			private function OnShowHelp():void
			{
				var _x:int=Math.max(0, (stage.fullScreenWidth - Help.width) >> 1);
				var _y:int=Math.max(0, (stage.fullScreenHeight - Help.height) >> 1);

				Help.open();
				Help.move(_x, _y);
			}

			private function OnResizeStage(e:Event):void
			{
				menubar.width=stage.stageWidth;
				SelectComponet.height=stage.stageHeight - menubar.height;
				tabbar.x=stage.stageWidth - tabbar.width;
				viewstack1.x=tabbar.x;
				viewstack1.height=stage.stageHeight - tabbar.y - tabbar.height;
			}

			private function OnStartDrag(event:MouseEvent):void
			{
				this.nativeWindow.startMove();
			}

			private function OnChangeCheck(event:Event):void
			{
//				RookieEditor.getInstante().Editor.setTitleBar(check.selected);
			}

			private function OnChangeCheckFps(value:Boolean):void
			{
				RookieEditor.getInstante().Editor.setStatsVisble(value);
			}

			private function OnOpenSource(event:MouseEvent):void
			{
				var file:File=new File(SharedManager.getInstance().getTextureUrl());
				file.openWithDefaultApplication();
			}

			protected function dataGrid_addedToStageHandler(event:Event):void
			{
				PropertyWindow.instance(dataGrid).updatePropVeiw();

			}

			protected function myTree_addedToStageHandler(event:Event):void
			{
				// TODO Auto-generated method stub
				TreeWindow.instance(myTree).update();
			}

			protected function list_addedToStageHandler(event:Event):void
			{
				// TODO Auto-generated method stub
				HistroyWindow.instance(list).update();
			}

			protected function menubar_changeHandler(event:MouseEvent):void
			{
				var m_index:int=event.target.data.@data;
				switch (m_index)
				{
					case 0:
						OnOpen();
						break;
					case 1:
						OnSave();
						break;
					case 2:
						OnClear();
						break;
					case 3:
						OnShowAlign();
						break;
					case 4:
						OnPack();
						break;
					case 5:
						OnPrasePacke();
						break;
					case 6:
						trace("有问题")
//						OnKeyPacker();
						break;
					case 7:
						OnShowCode();
						break;
					case 8:
						OnSetSystem();
						break;
					case 9:
						OnShowHelp();
						break;
					case 10:
						OnChangeCheckFps(true);
						break;
					default:
						break;
				}
			}
		]]>
	</fx:Script>
	<s:Panel id="SelectComponet"
			 x="0"
			 y="29"
			 width="171"
			 height="571"
			 cornerRadius="0"
			 dropShadowVisible="false"
			 title="选择组件">
		<s:Button x="29"
				  y="0"
				  width="120"
				  height="21"
				  label="Button"
				  click="SelectWindow.instance.OnComponentClick(event)"
				  name="Button"/>
		<s:Button x="29"
				  y="20"
				  width="120"
				  height="21"
				  label="CheckBox"
				  click="SelectWindow.instance.OnComponentClick(event)"
				  name="CheckBox"/>
		<s:Button x="29"
				  y="40"
				  width="120"
				  height="21"
				  label="Label"
				  click="SelectWindow.instance.OnComponentClick(event)"
				  name="Label"/>
		<s:Button x="29"
				  y="60"
				  width="120"
				  height="21"
				  label="TitleWindow"
				  click="SelectWindow.instance.OnComponentClick(event)"
				  name="TitleWindow"/>
		<s:Button x="29"
				  y="80"
				  width="120"
				  height="21"
				  label="RadioButton"
				  click="SelectWindow.instance.OnComponentClick(event)"
				  name="RadioButton"/>
		<s:Button x="29"
				  y="100"
				  width="120"
				  height="21"
				  label="Slider"
				  click="SelectWindow.instance.OnComponentClick(event)"
				  name="Slider"/>
		<s:Button x="29"
				  y="120"
				  width="120"
				  height="21"
				  label="SkinImage"
				  click="SelectWindow.instance.OnComponentClick(event)"
				  name="SkinImage"/>
		<s:Button x="29"
				  y="140"
				  width="120"
				  height="21"
				  label="List"
				  click="SelectWindow.instance.OnComponentClick(event)"
				  name="List"/>
		<s:Button x="29"
				  y="319"
				  width="120"
				  height="21"
				  label="Scroll Container"
				  click="SelectWindow.instance.OnComponentClick(event)"
				  name="ScrollContainer"/>
		<s:Button x="29"
				  y="339"
				  width="120"
				  height="21"
				  label="清除"
				  click="SelectWindow.instance.OnComponentRemove(event)"
				  toolTip="清除当前绑定在鼠标上的组件"/>
		<s:Button x="29"
				  y="219"
				  width="120"
				  height="21"
				  name="GroupedList"
				  click="SelectWindow.instance.OnComponentClick(event)"
				  label="Grouped List"/>
		<s:Button x="29"
				  y="239"
				  width="120"
				  height="21"
				  click="SelectWindow.instance.OnComponentClick(event)"
				  name="NumericStepper"
				  label="Numeric Stepper"/>
		<s:Button x="29"
				  y="259"
				  width="120"
				  height="21"
				  click="SelectWindow.instance.OnComponentClick(event)"
				  name="PageIndicator"
				  label="Page Indicator"/>
		<s:Button x="29"
				  y="279"
				  width="120"
				  height="21"
				  click="SelectWindow.instance.OnComponentClick(event)"
				  name="PickerList"
				  label="Picker List"/>
		<s:Button x="29"
				  y="299"
				  width="120"
				  height="21"
				  click="SelectWindow.instance.OnComponentClick(event)"
				  name="ProgressBar"
				  label="Progress Bar"/>
		<s:Button x="29"
				  y="199"
				  width="120"
				  height="21"
				  name="ScrollText"
				  click="SelectWindow.instance.OnComponentClick(event)"
				  label="Scroll Text"/>
		<s:Button x="29"
				  y="179"
				  width="120"
				  height="21"
				  name="TextInput"
				  click="SelectWindow.instance.OnComponentClick(event)"
				  label="Text Input"/>
		<s:Button x="29"
				  y="160"
				  width="120"
				  height="21"
				  click="SelectWindow.instance.OnComponentClick(event)"
				  name="TabBar"
				  label="Tab Bar"/>
	</s:Panel>
	<s:TabBar id="tabbar"
			  x="946"
			  y="29"
			  width="254"
			  dataProvider="{viewstack1}"/>
	<mx:ViewStack id="viewstack1"
				  x="945"
				  y="53"
				  width="254"
				  height="547">
		<s:NavigatorContent width="100%"
							height="100%"
							label="属性">
			<s:DataGrid x="0"
						y="0"
						id="dataGrid"
						requestedRowCount="2"
						width="100%"
						height="547"
						mouseDown="{event.stopPropagation()}"
						editable="true"
						doubleClickEnabled="true"
						doubleClick="PropertyWindow.instance().OnDoubleClick(event)"
						addedToStage="dataGrid_addedToStageHandler(event)"
						styleName="myDataGrid">
				<s:columns>
					<mx:ArrayList>
						<s:GridColumn id="column1"
									  dataField="Name"
									  headerText="属性名"
									  editable="false"/>
						<s:GridColumn id="column2"
									  dataField="Value"
									  headerText="属性值"
									  editable="false"/>
					</mx:ArrayList>
				</s:columns>
			</s:DataGrid>
		</s:NavigatorContent>
		<s:NavigatorContent width="100%"
							height="100%"
							label="舞台组件列表">
			<mx:Tree id="myTree"
					 x="0"
					 y="0"
					 width="100%"
					 height="547"
					 click="TreeWindow.instance().treeChanged(event);"
					 iconFunction="TreeWindow.instance().IconFunction"
					 itemRenderer="com.gamerisker.view.TreeRender"
					 labelFunction="TreeWindow.instance().LabelFunction"
					 mouseDown="TreeWindow.instance().OnStop(event)"
					 addedToStage="myTree_addedToStageHandler(event)"
					 showRoot="false"
					 styleName="myTree"/>
		</s:NavigatorContent>
		<s:NavigatorContent width="100%"
							height="100%"
							label="历史动作">
			<s:List id="list"
					x="0"
					y="0"
					width="254"
					height="547"
					change="HistroyWindow.instance().OnChangeEvent(event)"
					addedToStage="list_addedToStageHandler(event)"
					mouseDown="{event.stopPropagation();}">
				<s:itemRenderer>
					<fx:Component>
						<s:ItemRenderer>
							<s:Label id="nameLabel"
									 text="{data['name']}"
									 fontSize="12"
									 top="5"
									 left="5"
									 right="5"
									 height="16"/>
						</s:ItemRenderer>
					</fx:Component>
				</s:itemRenderer>
			</s:List>
		</s:NavigatorContent>
	</mx:ViewStack>
	<mx:MenuBar id="menubar"
				x="0"
				y="0"
				width="1200"
				height="30"
				mouseDown="menubar_changeHandler(event)"
				dataProvider="{menuList}"
				labelField="@label">
	</mx:MenuBar>
</s:WindowedApplication>
